Failed to create window !
Stack trace (most recent call last):
#21   Object "", at 0xffffffffffffffff, in 
#20   Object "/home/gage/Desktop/Programming/GameEngineWorkspace/bin/Sandbox/Debug/Sandbox", at 0x55a58e12ac64, in _start
#19   Source "./csu/../csu/libc-start.c", line 392, in __libc_start_main_impl
#18   Source "./csu/../sysdeps/nptl/libc_start_call_main.h", line 58, in __libc_start_call_main
#17   Source "/home/gage/Desktop/Programming/GameEngineWorkspace/Sandbox/main.cpp", line 26, in main
         23: {
         24:     init();
         25:     
      >  26:     auto win = std::make_shared<win::Window>(1600, 900, "Hello world");
         27: 
         28:     shutdown();
         29:     return 0;
#16   Source "/usr/include/c++/11/bits/shared_ptr.h", line 879, in std::shared_ptr<gage::win::Window> std::make_shared<gage::win::Window, int, int, char const (&) [12]>(int&&, int&&, char const (&) [12])
        876:     {
        877:       typedef typename std::remove_cv<_Tp>::type _Tp_nc;
        878:       return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
      > 879: 				       std::forward<_Args>(__args)...);
        880:     }
        881: 
        882:   /// std::hash specialization for shared_ptr.
#15   Source "/usr/include/c++/11/bits/shared_ptr.h", line 863, in std::shared_ptr<gage::win::Window> std::allocate_shared<gage::win::Window, std::allocator<gage::win::Window>, int, int, char const (&) [12]>(std::allocator<gage::win::Window> const&, int&&, int&&, char const (&) [12])
        860:       static_assert(!is_array<_Tp>::value, "make_shared<T[]> not supported");
        861: 
        862:       return shared_ptr<_Tp>(_Sp_alloc_shared_tag<_Alloc>{__a},
      > 863: 			     std::forward<_Args>(__args)...);
        864:     }
        865: 
        866:   /**
#14   Source "/usr/include/c++/11/bits/shared_ptr.h", line 409, in std::shared_ptr<gage::win::Window>::shared_ptr<std::allocator<gage::win::Window>, int, int, char const (&) [12]>(std::_Sp_alloc_shared_tag<std::allocator<gage::win::Window> >, int&&, int&&, char const (&) [12])
        406:       // This constructor is non-standard, it is used by allocate_shared.
        407:       template<typename _Alloc, typename... _Args>
        408: 	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
      > 409: 	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
        410: 	{ }
        411: 
        412:       template<typename _Yp, typename _Alloc, typename... _Args>
#13   Source "/usr/include/c++/11/bits/shared_ptr_base.h", line 1342, in std::__shared_ptr<gage::win::Window, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<gage::win::Window>, int, int, char const (&) [12]>(std::_Sp_alloc_shared_tag<std::allocator<gage::win::Window> >, int&&, int&&, char const (&) [12])
       1339:       // This constructor is non-standard, it is used by allocate_shared.
       1340:       template<typename _Alloc, typename... _Args>
       1341: 	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
      >1342: 	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
       1343: 	{ _M_enable_shared_from_this_with(_M_ptr); }
       1344: 
       1345:       template<typename _Tp1, _Lock_policy _Lp1, typename _Alloc,
#12   Source "/usr/include/c++/11/bits/shared_ptr_base.h", line 650, in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<gage::win::Window, std::allocator<gage::win::Window>, int, int, char const (&) [12]>(gage::win::Window*&, std::_Sp_alloc_shared_tag<std::allocator<gage::win::Window> >, int&&, int&&, char const (&) [12])
        647: 	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
        648: 	  auto __guard = std::__allocate_guarded(__a2);
        649: 	  _Sp_cp_type* __mem = __guard.get();
      > 650: 	  auto __pi = ::new (__mem)
        651: 	    _Sp_cp_type(__a._M_a, std::forward<_Args>(__args)...);
        652: 	  __guard = nullptr;
        653: 	  _M_pi = __pi;
#11   Source "/usr/include/c++/11/bits/shared_ptr_base.h", line 519, in std::_Sp_counted_ptr_inplace<gage::win::Window, std::allocator<gage::win::Window>, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<int, int, char const (&) [12]>(std::allocator<gage::win::Window>, int&&, int&&, char const (&) [12])
        516: 	{
        517: 	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
        518: 	  // 2070.  allocate_shared should use allocator_traits<A>::construct
      > 519: 	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
        520: 	      std::forward<_Args>(__args)...); // might throw
        521: 	}
#10   Source "/usr/include/c++/11/bits/alloc_traits.h", line 518, in void std::allocator_traits<std::allocator<gage::win::Window> >::construct<gage::win::Window, int, int, char const (&) [12]>(std::allocator<gage::win::Window>&, gage::win::Window*, int&&, int&&, char const (&) [12])
        515: #if __cplusplus <= 201703L
        516: 	  __a.construct(__p, std::forward<_Args>(__args)...);
        517: #else
      > 518: 	  std::construct_at(__p, std::forward<_Args>(__args)...);
        519: #endif
        520: 	}
#9    Source "/usr/include/c++/11/bits/stl_construct.h", line 97, in decltype (::new ((void*)(0)) gage::win::Window((declval<int>)(), (declval<int>)(), (declval<char const (&) [12]>)())) std::construct_at<gage::win::Window, int, int, char const (&) [12]>(gage::win::Window*, int&&, int&&, char const (&) [12])
         94:     construct_at(_Tp* __location, _Args&&... __args)
         95:     noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
         96:     -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
      >  97:     { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
         98: #endif // C++20
         99: #endif// C++17
#8    Source "/home/gage/Desktop/Programming/GameEngineWorkspace/Core/src/win/Window.cpp", line 20, in gage::win::Window::Window(int, int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
         17:         p_window = glfwCreateWindow(width, height, title.c_str(), nullptr, nullptr);
         18:         if(p_window)
         19:         {
      >  20:             logger.error("Failed to create window !");
         21:             throw WindowException{};
         22:         }
#7    Source "/home/gage/Desktop/Programming/GameEngineWorkspace/Core/src/log/EntryBuilder.cpp", line 27, in gage::log::EntryBuilder::~EntryBuilder()
         24:         {
         25:             if(level_ <= Level::Error)
         26:             {
      >  27:                 trace_.emplace();
         28:             }
         29:             sink_->submit(*this);
         30:         }
#6    Source "/usr/include/c++/11/optional", line 875, in std::enable_if<is_constructible_v<gage::utils::StackTrace>, gage::utils::StackTrace&>::type std::optional<gage::utils::StackTrace>::emplace<>()
        872: 	noexcept(is_nothrow_constructible_v<_Tp, _Args...>)
        873: 	{
        874: 	  this->_M_reset();
      > 875: 	  this->_M_construct(std::forward<_Args>(__args)...);
        876: 	  return this->_M_get();
        877: 	}
#5    Source "/usr/include/c++/11/optional", line 419, in void std::_Optional_base_impl<gage::utils::StackTrace, std::_Optional_base<gage::utils::StackTrace, false, false> >::_M_construct<>()
        416: 	_M_construct(_Args&&... __args)
        417: 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
        418: 	{
      > 419: 	  static_cast<_Dp*>(this)->_M_payload._M_construct(
        420: 	    std::forward<_Args>(__args)...);
        421: 	}
#4    Source "/usr/include/c++/11/optional", line 251, in void std::_Optional_payload_base<gage::utils::StackTrace>::_M_construct<>()
        248: 	_M_construct(_Args&&... __args)
        249: 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
        250: 	{
      > 251: 	  std::_Construct(std::__addressof(this->_M_payload._M_value),
        252: 			  std::forward<_Args>(__args)...);
        253: 	  this->_M_engaged = true;
        254: 	}
#3    Source "/usr/include/c++/11/bits/stl_construct.h", line 119, in void std::_Construct<gage::utils::StackTrace>(gage::utils::StackTrace*)
        116: 	  return;
        117: 	}
        118: #endif
      > 119:       ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
        120:     }
        121: #else
        122:   template<typename _T1, typename _T2>
#2    Source "/home/gage/Desktop/Programming/GameEngineWorkspace/Core/src/utils/StackTrace.cpp", line 11, in gage::utils::StackTrace::StackTrace()
          8:     StackTrace::StackTrace()
          9:     {
         10:         p_trace = std::make_unique<backward::StackTrace>();
      >  11:         p_trace->load_here(32);
         12:     }
         13: 
         14:     StackTrace::StackTrace(const StackTrace &other)
#1    Source "/home/gage/Desktop/Programming/GameEngineWorkspace/Core/ThirdParty/backward.hpp", line 879, in backward::StackTraceImpl<backward::system_tag::linux_tag>::load_here(unsigned long, void*, void*)
        876:       return 0;
        877:     }
        878:     _stacktrace.resize(depth);
      > 879:     size_t trace_cnt = details::unwind(callback(*this), depth);
        880:     _stacktrace.resize(trace_cnt);
        881:     skip_n_firsts(0);
        882:     return size();
#0    Source "/home/gage/Desktop/Programming/GameEngineWorkspace/Core/ThirdParty/backward.hpp", line 861, in unsigned long backward::details::unwind<backward::StackTraceImpl<backward::system_tag::linux_tag>::callback>(backward::StackTraceImpl<backward::system_tag::linux_tag>::callback, unsigned long)
        859: template <typename F> size_t unwind(F f, size_t depth) {
        860:   Unwinder<F> unwinder;
      > 861:   return unwinder(f, depth);
        862: }
        863: 
        864: } // namespace details
